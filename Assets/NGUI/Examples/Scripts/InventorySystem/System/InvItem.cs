using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Inventory System -- Item
/// </summary>

[System.Serializable]
public class InvItem
{
	public enum Slot
	{
		None,		// First element MUST be 'None'
		Weapon,		// All the following elements are yours to customize -- edit, add or remove as you desire
		Shield,
		Body,
		Shoulders,
		Bracers,
		Boots,
		Trinket,
	}

	public enum Quality
	{
		Broken,
		Cursed,
		Damaged,
		Worn,
		Sturdy,		// Normal quality
		Polished,
		Improved,
		Crafted,
		Superior,
		Enchanted,
		Epic,
		Legendary,
	}

	/// <summary>
	/// 16-bit item ID, generated by the system.
	/// Not to be confused with a 32-bit item ID, which actually contains the ID of the database as its prefix.
	/// </summary>

	public int id16;

	/// <summary>
	/// Name of this item.
	/// </summary>

	public string name;

	/// <summary>
	/// This item's custom description.
	/// </summary>

	public string description;

	/// <summary>
	/// Slot that this item belongs to.
	/// </summary>

	public Slot slot = Slot.None;

	/// <summary>
	/// Item quality -- applies a penalty or bonus to all base stats.
	/// </summary>

	public Quality quality = Quality.Sturdy;

	/// <summary>
	/// And and all base stats this item may have.
	/// </summary>

	public List<InvStat> stats = new List<InvStat>();

	/// <summary>
	/// Game Object that will be created and attached to the specified slot on the body.
	/// This should typically be a prefab with a renderer component, such as a sword,
	/// a bracer, shield, etc.
	/// </summary>

	public GameObject attachment;

	/// <summary>
	/// Object's main material color.
	/// </summary>

	public Color color = Color.white;

	/// <summary>
	/// Atlas used for the item's icon.
	/// </summary>

	public UIAtlas iconAtlas;

	/// <summary>
	/// Name of the icon's sprite within the atlas.
	/// </summary>

	public string iconName = "";

	/// <summary>
	/// Convenience function -- convert quality to a multiplier value.
	/// </summary>

	public float qualityFactor
	{
		get
		{
			switch (quality)
			{
				case Quality.Cursed:	return -1f;
				case Quality.Broken:	return 0f;
				case Quality.Damaged:	return 0.25f;
				case Quality.Worn:		return 0.9f;
				case Quality.Sturdy:	return 1f;
				case Quality.Polished:	return 1.1f;
				case Quality.Improved:	return 1.25f;
				case Quality.Crafted:	return 1.5f;
				case Quality.Superior:	return 1.75f;
				case Quality.Enchanted:	return 2f;
				case Quality.Epic:		return 2.5f;
				case Quality.Legendary:	return 3f;
			}
			return 0f;
		}
	}
}